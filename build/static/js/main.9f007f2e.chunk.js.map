{"version":3,"sources":["components/ImageView/image002.jpg","components/ImageView/ImageView.module.css","components/Menu/MenuView.module.css","components/Menu/007-house.png","components/Menu/004-assistance.png","components/Menu/018-map.png","components/Menu/030-telephone.png","components/ImageView/ImageView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ImageView","className","styles","img","src","logo","alt","App","class","href","homeImg","aboutImg","cvImg","contactImg","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,sC,gBCC3CD,EAAOC,QAAU,CAAC,IAAM,yB,gBCAxBD,EAAOC,QAAU,CAAC,KAAO,yB,gBCDzBD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,+LCI5B,SAASC,IACtB,OAAO,yBAAKC,UAAWC,IAAOC,IAAKC,IAAKC,IAAMC,IAAI,S,yECuCrCC,MAnCf,WACE,OACE,yBAAKC,MAAM,WACP,6BACG,uBAAGC,KAAK,SAAQ,yBAAMD,MAAM,YAAYJ,IAAKM,MAAU,uBAAGF,MAAM,iBAChE,uBAAGC,KAAK,UAAS,yBAAMD,MAAM,aAAaJ,IAAKO,MAAW,uBAAGH,MAAM,sBACnE,uBAAGC,KAAK,OAAM,yBAAMD,MAAM,UAAUJ,IAAKQ,MAAQ,uBAAGJ,MAAM,iBAC1D,uBAAGC,KAAK,YAAW,yBAAMD,MAAM,eAAeJ,IAAKS,MAAa,uBAAGL,MAAM,0BAG5E,6BACI,kBAACR,EAAD,OAGJ,yBAAKQ,MAAO,aACV,6BAASM,GAAI,QACX,qCAGF,6BAASA,GAAI,SACX,sCAGH,6BAASA,GAAI,MACX,mCAGF,6BAASA,GAAI,WACX,2CCzBSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9f007f2e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image002.b9ca34a4.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"ImageView_img__1TaGw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"MenuView_menu__2nMqB\"};","module.exports = __webpack_public_path__ + \"static/media/007-house.6d1221f6.png\";","module.exports = __webpack_public_path__ + \"static/media/004-assistance.821dd7ab.png\";","module.exports = __webpack_public_path__ + \"static/media/018-map.8a5ccc99.png\";","module.exports = __webpack_public_path__ + \"static/media/030-telephone.3b7352c9.png\";","import React, { useState, useEffect } from 'react';\r\nimport logo from './image002.jpg';\r\nimport styles from './ImageView.module.css'\r\n\r\nexport default function ImageView() {\r\n  return <img className={styles.img} src={logo} alt=\"Logo\" />;\r\n}","import React from 'react';\nimport styles from './App.css';\nimport ImageView from './components/ImageView/ImageView'\nimport MenuView from './components/Menu/MenuView'\nimport homeImg from './components/Menu/007-house.png';\nimport aboutImg from './components/Menu/004-assistance.png';\nimport cvImg from './components/Menu/018-map.png';\nimport contactImg from './components/Menu/030-telephone.png';\n\nfunction App() {\n  return (\n    <div class=\"rootDiv\">\n        <nav>\n           <a href=\"#home\"><img  class='homeImage' src={homeImg}/><i class=\"far fa-user\"></i></a>\n           <a href=\"#about\"><img  class='aboutImage' src={aboutImg}/><i class=\"fas fa-briefcase\"></i></a>\n           <a href=\"#cv\"><img  class='cvImage' src={cvImg}/><i class=\"far fa-file\"></i></a>\n           <a href=\"#contact\"><img  class='contactImage' src={contactImg}/><i class=\"far fa-address-card\"></i></a>\n        </nav>\n\n        <div>\n            <ImageView />\n        </div>\n\n        <div class= 'container'>\n          <section id= 'home'>\n            <h1>home</h1>\n          </section>\n\n          <section id= 'about'>\n            <h1>about</h1>\n          </section>\n\n         <section id= 'cv'>\n           <h1>cv</h1>\n          </section>\n\n         <section id= 'contact'>\n           <h1>contact</h1>\n          </section>\n        </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}